# cython: language=c
# cython: language_level=3

__all__ = (
    "Class",
)

"""
Class abstraction.
"""

import typing
from typing import Iterable, Tuple, Union

from ..types.reference import ClassOrInterfaceType

if typing.TYPE_CHECKING:
    from .field import Field
    from .method import Method
    from .._argument import FieldDescriptor, MethodDescriptor


cdef class Class:
    """
    An abstract representation of a Java class.
    """

    # ------------------------------ Access flags ------------------------------ #

    property is_public:
        """
        Is this class public (can be accessed outside the package)?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_final:
        """
        Is this class final (no subclasses allowed)?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_super:
        """
        Should superclass methods be treated specially by the invokespecial instruction?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_interface:
        """
        Is this class an interface?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_abstract:
        """
        Is this class abstract?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_synthetic:
        """
        Is this class synthetic (generated by the compiler)?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_annotation:
        """
        Is this class an annotation?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_enum:
        """
        Is this class an enum?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    property is_module:
        """
        Is this class a module?
        """

        def __get__(self) -> bool:
            ...

        def __set__(self, value: bool) -> None:
            ...

    # ------------------------------ Other properties ------------------------------ #

    property name:
        """
        The (internal) name of this class.
        """

        def __get__(self) -> str:
            ...

        def __set__(self, value: str) -> None:
            ...

    property super:
        """
        The superclass of this class.
        """

        def __get__(self) -> Union["Class", None]:
            ...

        def __set__(self, value: Union["Class", None]) -> None:
            ...
    property super_name:
        """
        The name of the superclass of this class.
        """

        def __get__(self) -> Union[str, None]:
            ...

        def __set__(self, value: Union[str, None]) -> None:
            ...

    property interfaces:
        """
        The interfaces that this class implements.
        """

        def __get__(self) -> Tuple["Class", ...]:
            ...

        def __set__(self, value: Iterable["Class"]) -> None:
            ...

    property interface_names:
        """
        The names of the interfaces that this class implements.
        """

        def __get__(self) -> Tuple[str, ...]:
            ...

        def __set__(self, value: Iterable[str]) -> None:
            ...

    property methods:
        """
        The methods inside this class.
        """

        def __get__(self) -> Tuple["Method", ...]:
            ...

    property fields:
        """
        The fields inside this class.
        """

        def __get__(self) -> Tuple["Field", ...]:
            ...

    def get_method(self, name: str, *descriptor: "MethodDescriptor") -> "Method":
        """
        Gets a method in this class.

        :param name: The name of the method.
        :param descriptor: The descriptor of the method, if not given, the first method with the name is returned.
        :return: The method.
        """

        ...

    def add_method(self, name: str, *descriptor: "MethodDescriptor", **access_flags: bool) -> "Method":
        """
        Adds a method to this class given the provided information about it.

        :param name: The name of the method.
        :param descriptor: The descriptor of the method.
        :param access_flags: Any access flags to have on the method.
        :return: The method that was created.
        """

        ...

    def remove_method(self, name_or_method: Union[str, "Method"], *descriptor: "MethodDescriptor") -> "Method":
        """
        Removes a method from this class.

        :param name_or_method: The name of the method, or the method.
        :param descriptor: The descriptor of the method.
        :return: The method that was removed.
        """

        ...

    def get_field(self, name: str, descriptor: Union["FieldDescriptor", None] = None) -> "Field":
        """
        Gets a field in this class.

        :param name: The name of the field.
        :param descriptor: The descriptor of the field, if None, the first field with the name is returned.
        :return: The field.
        """

        ...

    def add_field(
            self, name: str, descriptor: Union["FieldDescriptor", None] = None, **access_flags: bool,
    ) -> "Field":
        """
        Adds a field to this class.

        :param name: The name of the field to add.
        :param descriptor: The descriptor of the field to add.
        :param access_flags: Any access flags to have on the field.
        :return: The field that was added.
        """

        ...

    def remove_field(self, name_or_field: Union[str, "Field"], descriptor: Union["FieldDescriptor", None] = None) -> "Field":
        """
        Removes a field from this class.

        :param name_or_field: The name of the field or the field.
        :param descriptor: The descriptor of the field.
        :return: The field that was removed.
        """

        ...

    def get_type(self) -> ClassOrInterfaceType:
        """
        :return: The type representation of this class.
        """

        return ClassOrInterfaceType(self.name)
