#!/usr/bin/env python3

__all__ = (
    "Class",
)

"""
Class abstraction.
"""

import typing
from abc import abstractmethod, ABC
from typing import Tuple, Union

from ..types import BaseType
from ..types.reference import ClassOrInterfaceType

if typing.TYPE_CHECKING:
    from .field import Field
    from .method import Method


class Class(ABC):
    """
    An abstract representation of a Java class.
    """

    # ------------------------------ Access flags ------------------------------ #

    @property
    @abstractmethod
    def is_public(self) -> bool:
        """
        :return: Is this class public (can be accessed outside the package)?
        """

        ...

    @is_public.setter
    @abstractmethod
    def is_public(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_final(self) -> bool:
        """
        :return: Is this class final (no subclasses allowed)?
        """

        ...

    @is_final.setter
    @abstractmethod
    def is_final(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_super(self) -> bool:
        """
        :return: Should superclass methods be treated specially by the invokespecial instruction?
        """

        ...

    @is_super.setter
    @abstractmethod
    def is_super(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_interface(self) -> bool:
        """
        :return: Is this class an interface?
        """

        ...

    @is_interface.setter
    @abstractmethod
    def is_interface(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_abstract(self) -> bool:
        """
        :return: Is this class abstract?
        """

        ...

    @is_abstract.setter
    @abstractmethod
    def is_abstract(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_synthetic(self) -> bool:
        """
        :return: Is this class synthetic (generated by the compiler)?
        """

        ...

    @is_synthetic.setter
    @abstractmethod
    def is_synthetic(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_annotation(self) -> bool:
        """
        :return: Is this class an annotation?
        """

        ...

    @is_annotation.setter
    @abstractmethod
    def is_annotation(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_enum(self) -> bool:
        """
        :return: Is this class an enum?
        """

        ...

    @is_enum.setter
    @abstractmethod
    def is_enum(self, value: bool) -> None:
        ...

    @property
    @abstractmethod
    def is_module(self) -> bool:
        """
        :return: Is this class a module?
        """

        ...

    @is_module.setter
    def is_module(self, value: bool) -> None:
        ...

    # ------------------------------ Other properties ------------------------------ #

    @property
    @abstractmethod
    def name(self) -> str:
        """
        :return: The (internal) name of this class.
        """

        ...

    @name.setter
    @abstractmethod
    def name(self, value: str) -> None:
        ...

    @property
    @abstractmethod
    def super(self) -> Union["Class", None]:
        """
        :return: The superclass of this class.
        """

        ...

    @super.setter
    @abstractmethod
    def super(self, value: Union["Class", None]) -> None:
        ...

    @property
    @abstractmethod
    def super_name(self) -> Union[str, None]:
        """
        :return: The name of the superclass of this class.
        """

        ...

    @super_name.setter
    @abstractmethod
    def super_name(self, value: Union[str, None]) -> None:
        ...

    @property
    @abstractmethod
    def interfaces(self) -> Tuple["Class", ...]:
        """
        :return: The interfaces that this class implements.
        """

        ...

    @interfaces.setter
    @abstractmethod
    def interfaces(self, value: Tuple["Class", ...]) -> None:
        ...

    @property
    @abstractmethod
    def interface_names(self) -> Tuple[str, ...]:
        """
        :return: The names of the interfaces that this class implements.
        """

        ...

    @interface_names.setter
    @abstractmethod
    def interface_names(self, value: Tuple[str, ...]) -> None:
        ...

    @property
    @abstractmethod
    def methods(self) -> Tuple["Method", ...]:
        """
        :return: The methods inside this class.
        """

        ...

    @property
    @abstractmethod
    def fields(self) -> Tuple["Field", ...]:
        """
        :return: The fields inside this class.
        """

        ...

    @abstractmethod
    def get_method(
            self,
            name: str,
            *descriptor: Union[Tuple[Union[Tuple[BaseType, ...], str], Union[BaseType, str]], Tuple[str]],
    ) -> "Method":
        """
        Gets a method in this class.

        :param name: The name of the method.
        :param descriptor: The descriptor of the method, if not given, the first method with the name is returned.
        :return: The method.
        """

        ...

    @abstractmethod
    def get_field(self, name: str, descriptor: Union[BaseType, str, None] = None) -> "Field":
        """
        Gets a field in this class.

        :param name: The name of the field.
        :param descriptor: The descriptor of the field, if None, the first field with the name is returned.
        :return: The field.
        """

        ...

    def get_type(self) -> ClassOrInterfaceType:
        """
        :return: The type representation of this class.
        """

        return ClassOrInterfaceType(self.name)
